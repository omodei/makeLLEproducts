#!/usr/bin/env python
import os,sys,glob,ROOT,math
import utils
import pyfits

#ftp_base_path='ftp://legacy.gsfc.nasa.gov/fermi/data/gbm/triggers'

_OFFSET      = 0.0
_DT          = 1.0
_ZENITHMAX   = 90
_THETAMAX    = 90
_BEFORE      = 1000
_AFTER       = 1000
_NSIGMA      = 4.0
_interactive = 0
_pipeline    = 0
_THETA_MIN   = 89
_RADIUS      = -1

# DIRECTORIES:
outputDir            = 'GBM_TriggerCatalog'
dirMCGenerated       = 'Generated'
dirMCToGenerateFiles = 'ToGenerate'

def GetThetaMin():
    return _THETA_MIN

def UpdateArchive():
    print '################### UPDATE ARCHIVE ################### '
    #_fsscbase='wger
    cmd='wget -rc "ftp://legacy.gsfc.nasa.gov/fermi/data/gbm/triggers/" -A"*tcat*" --no-remove-listing -N -P %s' % outputDir
    print cmd
    os.system(cmd)
    pass


def GetTimeMinMax(fitsFile):
    if not os.path.exists(fitsFile): return 0,0
    fin  = pyfits.open(fitsFile)
    hd   = fin['EVENTS']
    data = hd.data
    head = hd.header
    time = data.field('TIME')
    #t0   = head['TRIGTIME']
    #time = time-t0
    tmin = min(time)
    tmax = max(time)
    return tmin,tmax

def GenerateMC(output_ez, version, GRBNAME,MET, RA,DEC,DURATION,mode):
    print '--------------------------------------------------: Generation of the TEXT file to be used in the generation of LLE Montecarlo DATA'
    MCToGenerateFile = '%s/%s/v%02d/%s/%s.txt' % (output_ez,GRBNAME,version,dirMCToGenerateFiles,GRBNAME)
    os.system('mkdir -pv %s/%s/v%02d/%s' % (output_ez,GRBNAME,version,dirMCToGenerateFiles))
    #fileOutput='%s/%s.txt' % (dirMCToGenerateFiles,GRBNAME)

    txt = "# Configuration file for %s\n" % GRBNAME
    txt+="NAME                      = '%s'\n" % GRBNAME
    txt+="DURATION                  = %.2f\n" % DURATION
    txt+="MET                       = %.4f\n" % MET
    txt+="RA                        = %.4f\n" % RA
    txt+="DEC                       = %.4f\n" % DEC
    if 'forReal' in mode:
        fout=file(MCToGenerateFile,'w')
        fout.write(txt)
        print 'file saved in %s' % MCToGenerateFile
    else:
        print txt
        pass
    return 1


def GenerateLLE(output_ez,version,GRBNAME,MET, RA,DEC,DURATION,
                OFFSET=_OFFSET, DT=_DT ,
                BEFORE=_BEFORE, AFTER=_AFTER,
                ZENITHMAX=_ZENITHMAX,
                THETAMAX=_THETAMAX,RADIUS=_RADIUS,mode=['pha']):
    mymode=[]
    for x in mode: mymode.append(x)
    
    print '###################  GenerateLLE: ',GRBNAME,MET, RA,DEC,DURATION,OFFSET,DT,BEFORE,AFTER,ZENITHMAX,THETAMAX,mymode,output_ez,RADIUS
    print 'pha: ',glob.glob('%s/%s/v%02d/gll_cspec*pha' % (output_ez,GRBNAME,version))
    print 'ft1: ',glob.glob('%s/%s/v%02d/gll_lle*fit' % (output_ez,GRBNAME,version))
    print 'rsp: ',glob.glob('%s/%s/v%02d/gll_cspec*rsp' % (output_ez,GRBNAME,version))
    
    if not 'regenerate' in mymode:
        if 'pha' in mymode and len(glob.glob('%s/%s/v%02d/gll_cspec*pha' % (output_ez,GRBNAME,version)))>0 and len(glob.glob('%s/%s/v%02d/gll_lle*fit' % (output_ez,GRBNAME,version)))>0:
            print 'PHA File and FT1 file already generated:'
            mymode.remove('pha')
            pass
        if 'drm' in mymode and len(glob.glob('%s/%s/v%02d/*rsp' % (output_ez,GRBNAME,version))):
            print 'DRM File already generated:'
            mymode.remove('drm')
            pass
        pass
    myMode=0
    if 'drm' in mymode and 'pha' in mymode: myMode='lle' 
    elif 'drm' in mymode: myMode='drm'
    elif 'pha' in mymode: myMode='pha'
    print 'computig...',myMode
    if myMode:
        cmd='python -m mkdrm_ez -i /nfs/farm/g/glast/u54/omodei/GRBAnalysis-scons/python/config_LLE_DRM/DefaultLLE.txt -outdir %(output_ez)s/%(GRBNAME)s/v%(version)02d/ -v %(version)d ' %locals()
        cmd+='-mcbase /MC-Tasks/ServiceChallenge/GRBSimulator-Pass7 '
        cmd+='-ra %(RA).4f -dec %(DEC).4f -n %(GRBNAME)s -t %(MET).4f -d %(DURATION).1f -off %(OFFSET)s -dt %(DT)s -b %(BEFORE)s -a %(AFTER)s -r %(RADIUS)s -zenith %(ZENITHMAX)s -theta %(THETAMAX)d -m %(myMode)s' % locals()
        print ' -------------------------------------------------- Generation of LLE data files:'
        #print cmd
        if _pipeline:
            os.system('rm logfiles/%s.log' % GRBNAME)
            cmd=('bsub -J GEN_LLE_%s -o logfiles/%s.log -q long %s ' % (GRBNAME,GRBNAME,cmd))
            pass
        if 'forReal' in mymode: os.system(cmd)
        else: print cmd
    else:
        print 'Nothing to do :-('
        pass
    return 1

def ComputeLLEDetection(output_ez,version,OBJECT,FT2,RA_OBJ,DEC_OBJ,TRIGTIME,NSIGMA):
    print '###################  ComputeLLEDetection: ',OBJECT,FT2,RA_OBJ,DEC_OBJ,TRIGTIME,NSIGMA
    import computeSimpleDetection
    detected     = 0
    SIGNIFICANCE = 0
    t_first      = -666
    t_last       = -666
    
    list = glob.glob('%s/%s/v%02d/gll_lle*fit' % (output_ez,OBJECT,version))
    if len(list)==0:
        print 'No FT1 file found !!!!'
        return SIGNIFICANCE,t_first,t_last
    output_report_file_name = '%s/%s/v%02d/results.txt' %(output_ez,OBJECT,version)
    if os.path.exists(output_report_file_name):
        try:
            output_report_file = file(output_report_file_name,'r')
            lines = output_report_file.readlines()
            SIGNIFICANCE=float(lines[0].split('=')[1].strip())            
            t_first = float(lines[1].split('=')[1].strip())
            t_last  = float(lines[2].split('=')[1].strip())        
            if SIGNIFICANCE>NSIGMA: detected=1
            print 'LLE DETECTION ALREADY COMPUTED. SAVED RESULTS READ FROM FILE: %s' % output_report_file
            print ' .....SIGNIFICANCE... %.2f' % SIGNIFICANCE
            print ' .....T START........ %.2f' % t_first
            print ' .....T END.......... %.2f' % t_last
            return SIGNIFICANCE,t_first,t_last
        except:
            print 'FILE %s FOUND BUT SIGNIFICANCE NOT FOUND. RECOMPUTING...' % output_report_file_name
            pass
        pass
    
    XMIN_SIG=-10
    XMAX_SIG=300
    
    if 'SFL' in OBJECT:
        XMIN_SIG=-10
        XMAX_SIG=200
        pass
    
    ThetaGraph=computeSimpleDetection.GetThetaGraph(FT2,-_BEFORE,_AFTER,RA_OBJ,DEC_OBJ,TRIGTIME)
    ThetaGraph.SetLineColor(ROOT.kBlue)
    ThetaGraph.SetLineWidth(2)
    ThetaGraph.SetMinimum(0)
    ThetaGraph.SetMaximum(90)

    
    dts = [0.1,1.0,3.0,10.0]
    histos=[]
    graphs=[]    
    fitsFile = list[0]
    for i,dt in enumerate(dts): histos.append(computeSimpleDetection.makeLC(fitsFile,'histo_%d' % i,t0=TRIGTIME, dt=dt))
    XMIN,XMAX = GetTimeMinMax(fitsFile)    
    XMIN = XMIN - TRIGTIME
    XMAX = XMAX - TRIGTIME
    
    histo_bkg    = None
    histo_prob   = None
    significance = 0
    
    for i,histo in enumerate(histos):
        # histo_rates,histo_rates_test,detected=computeSimpleDetection.detectExcess(fitsFile,w=10,s=1,x=20)
        
        histo_bkg_i, histo_prob_i, significance_i, t_first_i, t_last_i = computeSimpleDetection.detectExcess2(histo,ThetaGraph,
                                                                                                              XMIN_SIG=XMIN_SIG,
                                                                                                              XMAX_SIG=XMAX_SIG,
                                                                                                              NSIGMA=NSIGMA)
        duration=t_last_i-t_first_i
        print '* DT=%10.2f *** SIG: %5.1f FROM %5.1f TO %5.1f ***' %(dts[i],significance_i,t_first_i, t_last_i)
        # 2nd iteration:
        if t_last_i>t_first_i:
            FUN='pol9'
            histo_bkg_i, histo_prob_i, significance_i, t_first_i, t_last_i = computeSimpleDetection.detectExcess2(histo,ThetaGraph,
                                                                                                                  XMIN_SIG=t_first_i,
                                                                                                                  XMAX_SIG=t_last_i,
                                                                                                                  NSIGMA=NSIGMA,FUN=FUN)
            
            print '* REITERATION: %s DT=%10.2f *** SIG: %5.1f FROM %5.1f TO %5.1f ***' %(FUN,dts[i],significance_i,t_first_i, t_last_i)
            pass
        
        if significance_i > significance:
            histo_bkg     = histo_bkg_i
            histo_prob    = histo_prob_i
            significance  = significance_i
            t_first       = t_first_i
            t_last        = t_last_i
            pass
        pass
    
    
    lines=[]
    if significance > NSIGMA:
        detected=1        
        print '* DETECTED!!! SIG: %5.1f FROM %5.1f TO %5.f ***' %(significance,t_first, t_last)                
        pass
    if significance>0:
        C=ROOT.TCanvas(OBJECT,OBJECT,1000,1200)
        C.Divide(1,4)
        C.cd(1)
        
        for i,histo in enumerate(histos):
            histo.Scale(1./dts[i])
            histo.SetLineColor(i+1)                                                            
            if i==0: histo.Draw('E0')
            else:    histo.Draw('E0same')
            if detected:
                l=ROOT.TLine(t_first,0,t_first,histo.GetMaximum())
                l.SetLineStyle(2)
                lines.append(l)
                l.Draw()
                
                l=ROOT.TLine(t_last,0,t_last,histo.GetMaximum())
                l.SetLineStyle(2)
                lines.append(l)
                l.Draw()
            pass
        C.cd(2)
        # ROOT.gPad.SetLogy()
        histo_bkg.Draw()
        if detected:
            l=ROOT.TLine(t_first,0,t_first,histo_bkg.GetMaximum())
            l.SetLineStyle(2)
            lines.append(l)
            l.Draw()
            
            l=ROOT.TLine(t_last,0,t_last,histo_bkg.GetMaximum())
            l.SetLineStyle(2)
            lines.append(l)
            l.Draw()
            pass
        
        
        C.cd(3)
        histo_prob.Draw()
        if detected:
            l=ROOT.TLine(t_first,0,t_first,histo_prob.GetMaximum())
            l.SetLineStyle(2)
            lines.append(l)
            l.Draw()
            
            l=ROOT.TLine(t_last,0,t_last,histo_prob.GetMaximum())
            l.SetLineStyle(2)
            lines.append(l)
            l.Draw()
            
            pass
        C.cd(4)
        Frame=ROOT.TGraph()
        Frame.SetPoint(0,XMIN,0)
        Frame.SetPoint(1,XMAX,90)
        if detected:
            l=ROOT.TLine(t_first,0,t_first,90)
            l.SetLineStyle(2)
            lines.append(l)
            l.Draw()
            
            l=ROOT.TLine(t_last,0,t_last,90)
            l.SetLineStyle(2)
            lines.append(l)
            l.Draw()
            pass
                
        Frame.Draw('ap')
        ThetaGraph.Draw('l')
        
        C.cd()
        ROOT.gPad.Update()
        if _interactive:   a=raw_input('Continue')
        stringName=OBJECT[-9:]
        C.Print('%s/%s/v%02d/gll_detec_bn%s_v%02d.png' %(output_ez,OBJECT,version,stringName,version))
        pass
    
    output_report_file = file(output_report_file_name,'w')
    output_report_file.write('SIGNIFICANCE=%s\n' % significance)
    output_report_file.write('TSTART=%s\n' % t_first)
    output_report_file.write('TEND=%s\n' % t_last)

    output_report_file.close()
    return significance,t_first, t_last

def ComputeDetection(GRBNAME, mode, opt={}):
    print '--------------------------------------------------: ComputeDetection:',GRBNAME, mode
    ##################################################
    GeneralOptions={ "IGNORE_THETA":1,
                     "TSTART":-20, 
                     "TSTOP":300,
                     "BEFORE":600,
                     "AFTER":3600,
                     "EMIN":100,
                     "EMAX":100000,
                     "TSMIN":20,
                     "TSMIN_EXT":10,
                     "UPDATE_POS_TSMAP":1,
                     "ULINDEX":-2.00,
                     "ZMAX":105,
                     "ROI":12,
                     "DT":1.0,
                     "IRFS":None,
                     "like_model":'GRB+TEM+GAL0+2FGL',
                     "like_timeBins":'LOG',
                     "NLIKEBINS":48,
                     "EXTENDED_TSTART":0.01,
                     "EXTENDED_TSTOP":10000,
                     "MAKE_LIKE":1,
                     "MAKE_LLE":1,
                     "LLEDT":"0.1,10",
                     "N":10,
                     "LLEDS":0,
                     "GRBTRIGGERDATE":0,
                     "GRBT05":0,
                     "GRBT90":60,
                     "RA":0,
                     "DEC":0,
                     "ERR":0}
    for k in opt.keys():
        try: GeneralOptions[k]=opt[k]
        except: print ' *** Option %s not available!' % k
        pass
    ##################################################
    def convertToString(D):
        txt=''
        for k in D.keys():
            if isinstance(D[k],str): txt+="%s=\'%s\' " %(k,D[k])
            else: txt+='%s=%s '%(k,D[k])
            pass
        return txt
    ##################################################
    if GeneralOptions['GRBTRIGGERDATE']==0 or GeneralOptions['IRFS']==None: 
        print 'You have to pass a dictionary containing GRBTRIGGERDATE,RA,and DEC, and the IRFS at least. Otgher possible variables are:'
        for k in GeneralOptions.keys(): print k, GeneralOptions[k]
        return 0
    stringName=GRBNAME[-9:]
    OUTDIR   = os.environ['OUTDIR']
    #GeneralForAll = "IGNORE_THETA=1 TSTART=-20 TSTOP=300 BEFORE=600 AFTER=3600 EMIN=100 EMAX=100000 TSMIN=20 TSMIN_EXT=10 UPDATE_POS_TSMAP=1 ULINDEX=-2.00 ZMAX=105 ROI=%s DT=%.1f " % (ROI,DT)
    #General = GeneralForAll+"IRFS=\'%s\' like_model=\'%s\' like_timeBins=\'LOG\' NLIKEBINS=48 EXTENDED_TSTART=0.01 EXTENDED_TSTOP=10000 " %(IRFS,bkg)    
    #General+='MAKE_LIKE=1 MAKE_LLE=1 LLEDT=0.1,10 N=10 LLEDS=0 '
    #General+='GRBTRIGGERDATE=%.1f GRBT05=0 GRBT90=%.2f RA=%.4f DEC=%.4f ERR=%.1e ' %(MET,duration,RA,DEC,ERR)
    General = convertToString(GeneralOptions)
    print ' *** Running gtgrb detection ON :', stringName
    subJob0  = 'submitJob.py -q xxl -exe computeDetection %s' %(General)
    test     = 'gtgrb.py -nox -go -exe computeDetection %s' % (General)
    if 'pipe' in mode: cmd=subJob0
    else: cmd=test
    
    if 'forReal' in mode: os.system(cmd)        
    else: print cmd
    return 1

def CreateDictionaryFromTree(rootFile):
    if not os.path.exists(rootFile): return None
    print '########################### CreateDictionaryFromTree:',rootFile
    tfile=ROOT.TFile(rootFile,'OPEN')
    tree=tfile.Get("GRBCatalog")
    
    #except: return none
    grbs={}
    for i in range(tree.GetEntries()):
        vars={}
        tree.GetEntry(i)
        vars['LLENSIG']=tree.LLENSIG
        vars['LLEDURATION']=tree.LLET90+tree.LLET90hierr+tree.LLEt05+tree.LLEt05loerr
        #print tree.GRBNAME.strip(),tree.LLET90,tree.LLET90hierr,tree.LLEt05,tree.LLEt05loerr,vars['LLENSIG'],vars['LLEDURATION']
        # ...
        grbs[tree.GRBNAME.strip()]=vars
        pass
    
    return grbs

def ParseTrigCatFile(fileName):    
    fin = pyfits.open(fileName)
    h   = fin[0].header
    RA_OBJ   = float(h['RA_OBJ'])
    DEC_OBJ  = float(h['DEC_OBJ'])
    ERR_RAD  = float(h['ERR_RAD'])
    TRIGTIME = float(h['TRIGTIME'])
    CLASS    = h['CLASS'].strip()
    OBJECT   = h['OBJECT'].strip()    
    try: LOC_SRC  = h['LOC_SRC'].strip()
    except: LOC_SRC='nan'
    return (CLASS,OBJECT,RA_OBJ,DEC_OBJ,ERR_RAD,TRIGTIME,LOC_SRC)


def GetFT2(TRIGTIME):
    METMIN  = TRIGTIME - _BEFORE
    METMAX  = TRIGTIME + _AFTER
    try: FT2 = glob.glob('FT2/FT2_ft2_%d_%d.fits' % (METMIN-3600,METMAX+3600))[0]
    except: FT2 = None
    if FT2 is None:
        FT2 = utils.getFT2('FT2',METMIN-3600,METMAX+3600)
        pass
    if not os.path.exists(FT2):
        FT2=None
        print 'No FT file found!!!!'
        pass
    return FT2


def GetTheta(FT2,TRIGTIME,RA_OBJ,DEC_OBJ):
    i=0
    try:    (THETA,i) = utils.getTheta(FT2,TRIGTIME,RA_OBJ,DEC_OBJ,i)
    except:   return 666
    return THETA

def help():
    print 'Code written by nicola.omodei@slac.stanford.edu'
    print 'options:'
    print '   -drm build the DRM (provided a MC has been run) '
    print '   -pha  build the PHA and FT1 LLE file '
    print '   -mc  create the configuration file for the Monte Carlo generation  '
    print '   -gtgrb  analyize using GRBAnalysis-scons'
    print '   -f <EXPRESSION> filter the GRBtrigctalog'
    print '   -real execute per real the job  '
    pass


if __name__=='__main__':
    ROOT.gStyle.SetFillStyle(1)
    ROOT.gStyle.SetFrameFillColor(10)
    ROOT.gStyle.SetCanvasColor(10);
    output_ez='output_ez'
    version = 0
    lle     = 1
    drm     = 1
    pha1    = 1
    dete    = 1
    
    RA_OBJ,DEC_OBJ=None,None
    OFFSET   = 0
    DURATION = 0
    TRIGTIME = 0
    DT       = 1.0
    OUTPUT_NAME='GRBYYMMDDFFF'
    
    
    if _interactive==0: ROOT.gROOT.SetBatch(True)
    
    for (i,a) in enumerate(sys.argv):
        if a=='-tt': TRIGTIME = float(sys.argv[i+1])        
        if a=='-o': output_ez   = sys.argv[i+1]
        if a=='-v' : version     = int(sys.argv[i+1])
        if a=='-n' : OUTPUT_NAME = sys.argv[i+1]
        if a=='-lle': lle        = int(sys.argv[i+1])
        if a=='-drm': drm        = int(sys.argv[i+1])
        if a=='-pha1': pha1      = int(sys.argv[i+1])        
        if a=='-dete': dete      = int(sys.argv[i+1])        
        if a=='-ra' :  RA_OBJ    = float(sys.argv[i+1])
        if a=='-dec' : DEC_OBJ   = float(sys.argv[i+1])
        if a=='-off' : OFFSET    = float(sys.argv[i+1])
        if a=='-dur' : DURATION  = float(sys.argv[i+1])
        if a=='-dt': DT          = float(sys.argv[i+1])
        pass
    LLE_DURATION=DURATION
    if DURATION==0: LLE_DURATION=100

    TRIGGER_NAME = OUTPUT_NAME[-9:] #utils.met2date(TRIGTIME,opt="grbname")
    CLASS        = OUTPUT_NAME[:-9]
    
    print 100*'-'
    print 'TRIGGER_NAME: %s' % TRIGGER_NAME
    print 'CLASS          = %s , TRIGGERTIME= %.4f' %(CLASS,TRIGTIME)
    print 'RA,DEC = %10.3f, %10.3f ' %(RA_OBJ,DEC_OBJ)
    # STEP 2: GET FT2
    FT2   = GetFT2(TRIGTIME)
    if FT2 is None: exit()
    print 'FT2 FILE:', FT2
    # STEP 3: GET THETA:
    THETA = GetTheta(FT2,TRIGTIME,RA_OBJ,DEC_OBJ)
    print 'THETA: %.2f' % THETA
    print 100*'-'
    
    output_dir_version='%(output_ez)s/%(TRIGGER_NAME)s/v%(version)02d' % locals()
    os.system('mkdir -pv %(output_dir_version)s' % locals())    
    fileout=file('%(output_dir_version)s/jobTag.txt' % locals(),'w')
    fileout.writelines('THETA=%.2f\n' % THETA)
    fileout.close()
    
    if THETA > _THETA_MIN:
        fileout=file('%(output_dir_version)s/theta.txt' % locals(),'w')
        fileout.writelines('THETA=%.2f\n' % THETA)
        fileout.close()
        exit()
        pass

    mode=['pha','forReal']
    cmd_cp = 'cp %(FT2)s %(output_dir_version)s/gll_pt_bn%(TRIGGER_NAME)s_v%(version)02d.fit' %locals()
    print cmd_cp
    os.system(cmd_cp)
    
    # STEP 4: GENERATE LLE FILES:
    selected=0
    if lle:
        selected= GenerateLLE(output_ez,version,TRIGGER_NAME,TRIGTIME,RA_OBJ,DEC_OBJ,LLE_DURATION,
                              OFFSET=OFFSET, DT=DT ,
                              BEFORE=_BEFORE, AFTER=_AFTER,
                              ZENITHMAX=_ZENITHMAX,
                              THETAMAX=_THETAMAX,RADIUS=_RADIUS, mode=mode)
        fileout=file('%(output_dir_version)s/jobTag.txt' % locals(),'a')
        fileout.writelines('SELECTED=%d\n' % selected)
        fileout.close()

        if selected==0:
            os.system('rm %(output_dir_version)s/jobTag.txt' % locals())
            exit()
            pass
        pass
    # STEP 5: COMPUTE LLE DETECTION:
    detected,t_last,t_first=0,0,0
    if dete:
        SIGNIFICANCE, t_first, t_last = ComputeLLEDetection(output_ez,version,TRIGGER_NAME,FT2,RA_OBJ,DEC_OBJ,TRIGTIME,NSIGMA=_NSIGMA)
        fileout=file('%(output_dir_version)s/jobTag.txt' % locals(),'a')
        detected=0
        if SIGNIFICANCE>_NSIGMA: detected=1
        fileout.writelines('DETECTED=%d\n' % detected)
        fileout.writelines('SIGNIFICANCE=%d\n' % SIGNIFICANCE)
        fileout.writelines('TFIRST=%d\n' % t_first)
        fileout.writelines('TLAST=%d\n' % t_last)
        fileout.close()
        if detected==0:
            os.system('rm %(output_dir_version)s/jobTag.txt' % locals())
            exit()
            pass
        pass
    # STEP 6: GENERATE MC FILES:
    if DURATION>0:
        DETECT_TFIRST=OFFSET
        DETECT_TLAST =DURATION+OFFSET
    else:
        DETECT_TFIRST=t_first
        DETECT_TLAST =t_last
        pass
    
    MC_DURATION = DETECT_TLAST - DETECT_TFIRST # ?
    
    if MC_DURATION>0:
        MC_TRIGTIME = TRIGTIME + DETECT_TFIRST    
        mc_generated = GenerateMC(output_ez,version,TRIGGER_NAME,MC_TRIGTIME,RA_OBJ,DEC_OBJ,MC_DURATION,mode)
        fileout=file('%(output_dir_version)s/jobTag.txt' % locals(),'a')
        fileout.writelines('MC_GENERATED=%d\n' % mc_generated)
        fileout.close()
        pass
    mode.append('regenerate')
    if drm: mode.append('drm')
    # STEP 7: REGENERATE THE PHA IN THE PROPER TIME RANGE:
    if lle and dete:
        selected= GenerateLLE(output_ez,version,TRIGGER_NAME, TRIGTIME, RA_OBJ, DEC_OBJ,
                              DURATION=MC_DURATION, OFFSET=DETECT_TFIRST, DT=DT ,
                              BEFORE=_BEFORE, AFTER=_AFTER,
                              ZENITHMAX=_ZENITHMAX,
                              THETAMAX=_THETAMAX, RADIUS=_RADIUS,mode=mode)
        fileout=file('%(output_dir_version)s/jobTag.txt' % locals(),'a')
        fileout.writelines('SELECTED2=%d\n' % selected)
        fileout.close()
        pass
    os.system('mv %(output_dir_version)s/jobTag.txt %(output_dir_version)s/job.done' % locals())
    

                    
    
